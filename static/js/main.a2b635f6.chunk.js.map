{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","taskToFind","selectedTodos","handleChange","event","target","name","value","setState","this","props","todos","selectUser","selectedUserId","filterTodos","filter","todo","title","toLowerCase","includes","completed","className","type","onChange","id","placeholder","map","classNames","key","checked","readOnly","button","userId","onClick","React","Component","request","url","options","fetch","then","res","ok","Error","status","statusText","json","CurrentUser","user","getUser","prevProps","data","clearUser","email","phone","App","handleClear","ReactDOM","render","document","getElementById"],"mappings":"2XAKaA,EAAb,4MACEC,MAAQ,CACNC,WAAY,GACZC,cAAe,OAHnB,EAMEC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAAtBC,EADgB,EAChBA,KAAMC,EADU,EACVA,MAEd,EAAKC,SAAL,eAAiBF,EAAOC,KAT5B,uDAYY,IAAD,EACuCE,KAAKC,MAA3CC,EADD,EACCA,MAAOC,EADR,EACQA,WAAYC,EADpB,EACoBA,eADpB,EAE+BJ,KAAKT,MAAnCC,EAFD,EAECA,WAAYC,EAFb,EAEaA,cAOdY,EALYH,EAAMI,QAAO,SAAAC,GAAI,OAClB,OAAfA,EAAKC,OACFD,EAAKC,MAAMC,cAAcC,SAASlB,EAAWiB,kBAGpBH,QAAO,SAACC,GACpC,OAAQd,GACN,IAAK,SACH,OAAQc,EAAKI,UACf,IAAK,YACH,OAAOJ,EAAKI,UACd,QACE,OAAOJ,MAIb,OAEE,yBAAKK,UAAU,YACb,sCAEA,8CAEG,IACD,2BACEC,KAAK,OACLD,UAAU,wBACVf,KAAK,aACLC,MAAON,EACPsB,SAAUd,KAAKN,aACfqB,GAAG,oBACHC,YAAY,qBAGf,IACD,4BACEnB,KAAK,gBACLC,MAAOL,EACPqB,SAAUd,KAAKN,cAEf,uCACA,0CACA,8CAGF,yBAAKkB,UAAU,4BACb,wBAAIA,UAAU,kBACXP,EAAYY,KAAI,SAAAV,GAAI,OACnB,wBACEK,UAAWM,IACT,iBACA,CAAE,0BAA2BX,EAAKI,WAClC,CAAE,6BAA8BJ,EAAKI,YAEvCQ,IAAKZ,EAAKQ,IAGV,+BACE,2BACEF,KAAK,WACLO,QAASb,EAAKI,UACdU,UAAQ,IAEV,2BAAId,EAAKC,QAEX,4BACEI,UAAWM,IAAW,CACpB,yBAAyB,EACzBI,QAAQ,EACR,kCACEf,EAAKgB,SAAWnB,IAGpBS,KAAK,SACLW,QAAS,WACPrB,EAAWI,EAAKgB,UAVpB,YAcGhB,EAAKgB,mBA/FxB,GAA8BE,IAAMC,W,wBCHvBC,G,MAAU,SAACC,EAAKC,GAAN,OAAkBC,MAAM,GAAD,OAF7B,kCAE6B,OAAeF,GAAOC,GACjEE,MAAK,SAACC,GACL,IAAKA,EAAIC,GACP,MAAM,IAAIC,MAAJ,UAAaF,EAAIG,OAAjB,cAA6BH,EAAII,aAGzC,OAAOJ,EAAIK,YCHFC,EAAb,4MACE/C,MAAQ,CACNgD,KAAM,MAFV,kEAMIvC,KAAKwC,YANT,yCASqBC,GACbA,EAAUlB,SAAWvB,KAAKC,MAAMsB,QAClCvB,KAAKwC,YAXX,gKDQuBjB,ECQQvB,KAAKC,MAAMsB,ODRTI,EAAQ,UAAD,OAAWJ,ICRnD,OAgBUgB,EAhBV,OAkBIvC,KAAKD,SAAS,CACZwC,KAAMA,EAAKG,OAnBjB,iCDQuB,IAAAnB,ICRvB,iGAuBY,IACAgB,EAASvC,KAAKT,MAAdgD,KACAI,EAAc3C,KAAKC,MAAnB0C,UAER,OAAa,OAATJ,EACK,KAIP,yBAAK3B,UAAU,eACb,wBAAIA,UAAU,sBACZ,+CAEG,IACA2B,EAAKxB,KAIV,wBAAIH,UAAU,qBAAqB2B,EAAK1C,MACxC,uBAAGe,UAAU,sBAAsB2B,EAAKK,OACxC,uBAAGhC,UAAU,sBAAsB2B,EAAKM,OACxC,4BACEjC,UAAU,4BACVC,KAAK,SACLW,QAASmB,GAHX,cA5CR,GAAiClB,IAAMC,WCuDxBoB,E,4MApDbvD,MAAQ,CACNW,MAAO,GACPE,eAAgB,G,EAUlBD,WAAa,SAACoB,GACZ,EAAKxB,SAAS,CACZK,eAAgBmB,K,EAIpBwB,YAAc,WACZ,EAAKhD,SAAS,CACZK,eAAgB,K,kEAfC,IAAD,OFFQuB,EAAQ,UEI/BI,MAAK,SAAC7B,GACL,EAAKH,SAAS,CAAEG,MAAOA,EAAMwC,Y,+BAgBzB,IAAD,EAC2B1C,KAAKT,MAA/BW,EADD,EACCA,MAAOE,EADR,EACQA,eAEf,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEV,MAAOA,EACPC,WAAYH,KAAKG,WACjBC,eAAgBA,KAIpB,yBAAKQ,UAAU,gBACb,yBAAKA,UAAU,0BACZR,EACC,kBAAC,EAAD,CACEmB,OAAQnB,EACRuC,UAAW3C,KAAK+C,cAEhB,0B,GA7CEtB,IAAMC,WCHxBsB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.a2b635f6.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport class TodoList extends React.Component {\n  state = {\n    taskToFind: '',\n    selectedTodos: 'all',\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({ [name]: value });\n  }\n\n  render() {\n    const { todos, selectUser, selectedUserId } = this.props;\n    const { taskToFind, selectedTodos } = this.state;\n\n    const findTodos = todos.filter(todo => (\n      todo.title !== null\n      && todo.title.toLowerCase().includes(taskToFind.toLowerCase())\n    ));\n\n    const filterTodos = findTodos.filter((todo) => {\n      switch (selectedTodos) {\n        case 'Active':\n          return !todo.completed;\n        case 'Completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n    return (\n\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label>\n          Search task:\n          {' '}\n          <input\n            type=\"text\"\n            className=\"TodoList__name-filter\"\n            name=\"taskToFind\"\n            value={taskToFind}\n            onChange={this.handleChange}\n            id=\"search-taskToFind\"\n            placeholder=\"Enter the title\"\n          />\n        </label>\n        {' '}\n        <select\n          name=\"selectedTodos\"\n          value={selectedTodos}\n          onChange={this.handleChange}\n        >\n          <option>All</option>\n          <option>Active</option>\n          <option>Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filterTodos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  { 'TodoList__item--checked': todo.completed },\n                  { 'TodoList__item--unchecked': !todo.completed },\n                )}\n                key={todo.id}\n              >\n\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  className={classNames({\n                    'TodoList__user-button': true,\n                    button: true,\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                  })}\n\n                  type=\"button\"\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    userId: PropTypes.number,\n    id: PropTypes.number,\n    title: PropTypes.string,\n  }).isRequired).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status} - ${res.statusText}`);\n    }\n\n    return res.json();\n  });\n\nexport const getTodos = () => request('/todos');\n\nexport const getUser = userId => request(`/users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUser();\n    }\n  }\n\n  async getUser() {\n    const user = await getUser(this.props.userId);\n\n    this.setState({\n      user: user.data,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clearUser } = this.props;\n\n    if (user === null) {\n      return null;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"CurrentUser__clear button\"\n          type=\"submit\"\n          onClick={clearUser}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos: todos.data });\n      });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  handleClear = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectUser={this.selectUser}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.handleClear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}